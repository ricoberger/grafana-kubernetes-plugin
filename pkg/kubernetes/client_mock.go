// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=./client_mock.go -package=kubernetes Client
//

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	context "context"
	http "net/http"
	reflect "reflect"

	backend "github.com/grafana/grafana-plugin-sdk-go/backend"
	data "github.com/grafana/grafana-plugin-sdk-go/data"
	gomock "go.uber.org/mock/gomock"
	rest "k8s.io/client-go/rest"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockClient) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockClientMockRecorder) CheckHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockClient)(nil).CheckHealth), ctx)
}

// GetContainers mocks base method.
func (m *MockClient) GetContainers(ctx context.Context, user string, groups []string, resourceId, namespace, name string) (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers", ctx, user, groups, resourceId, namespace, name)
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockClientMockRecorder) GetContainers(ctx, user, groups, resourceId, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockClient)(nil).GetContainers), ctx, user, groups, resourceId, namespace, name)
}

// GetLogs mocks base method.
func (m *MockClient) GetLogs(ctx context.Context, user string, groups []string, resourceId, namespace, name, container, filter string, timeRange backend.TimeRange) (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, user, groups, resourceId, namespace, name, container, filter, timeRange)
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockClientMockRecorder) GetLogs(ctx, user, groups, resourceId, namespace, name, container, filter, timeRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockClient)(nil).GetLogs), ctx, user, groups, resourceId, namespace, name, container, filter, timeRange)
}

// GetNamespaces mocks base method.
func (m *MockClient) GetNamespaces(ctx context.Context) (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", ctx)
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockClientMockRecorder) GetNamespaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockClient)(nil).GetNamespaces), ctx)
}

// GetResource mocks base method.
func (m *MockClient) GetResource(ctx context.Context, resourceId string) (*Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", ctx, resourceId)
	ret0, _ := ret[0].(*Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockClientMockRecorder) GetResource(ctx, resourceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockClient)(nil).GetResource), ctx, resourceId)
}

// GetResourceIds mocks base method.
func (m *MockClient) GetResourceIds(ctx context.Context) (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceIds", ctx)
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceIds indicates an expected call of GetResourceIds.
func (mr *MockClientMockRecorder) GetResourceIds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceIds", reflect.TypeOf((*MockClient)(nil).GetResourceIds), ctx)
}

// GetResources mocks base method.
func (m *MockClient) GetResources(ctx context.Context, user string, groups []string, resourceId, namespace, parameterName, parameterValue string, wide bool) (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, user, groups, resourceId, namespace, parameterName, parameterValue, wide)
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockClientMockRecorder) GetResources(ctx, user, groups, resourceId, namespace, parameterName, parameterValue, wide any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockClient)(nil).GetResources), ctx, user, groups, resourceId, namespace, parameterName, parameterValue, wide)
}

// Proxy mocks base method.
func (m *MockClient) Proxy(user string, groups []string, requestUrl string, w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Proxy", user, groups, requestUrl, w, r)
}

// Proxy indicates an expected call of Proxy.
func (mr *MockClientMockRecorder) Proxy(user, groups, requestUrl, w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockClient)(nil).Proxy), user, groups, requestUrl, w, r)
}

// RestConfig mocks base method.
func (m *MockClient) RestConfig() rest.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestConfig")
	ret0, _ := ret[0].(rest.Config)
	return ret0
}

// RestConfig indicates an expected call of RestConfig.
func (mr *MockClientMockRecorder) RestConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestConfig", reflect.TypeOf((*MockClient)(nil).RestConfig))
}
