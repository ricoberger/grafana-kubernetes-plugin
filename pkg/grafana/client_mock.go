// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=./client_mock.go -package=grafana Client
//

// Package grafana is a generated GoMock package.
package grafana

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateUserToken mocks base method.
func (m *MockClient) CreateUserToken(ctx context.Context, user string, tokenTTL int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToken", ctx, user, tokenTTL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserToken indicates an expected call of CreateUserToken.
func (mr *MockClientMockRecorder) CreateUserToken(ctx, user, tokenTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToken", reflect.TypeOf((*MockClient)(nil).CreateUserToken), ctx, user, tokenTTL)
}

// GetImpersonateGroups mocks base method.
func (m *MockClient) GetImpersonateGroups(ctx context.Context, headers http.Header) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImpersonateGroups", ctx, headers)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImpersonateGroups indicates an expected call of GetImpersonateGroups.
func (mr *MockClientMockRecorder) GetImpersonateGroups(ctx, headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImpersonateGroups", reflect.TypeOf((*MockClient)(nil).GetImpersonateGroups), ctx, headers)
}

// GetImpersonateUser mocks base method.
func (m *MockClient) GetImpersonateUser(ctx context.Context, headers http.Header) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImpersonateUser", ctx, headers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImpersonateUser indicates an expected call of GetImpersonateUser.
func (mr *MockClientMockRecorder) GetImpersonateUser(ctx, headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImpersonateUser", reflect.TypeOf((*MockClient)(nil).GetImpersonateUser), ctx, headers)
}

// GetURL mocks base method.
func (m *MockClient) GetURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockClientMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockClient)(nil).GetURL))
}
