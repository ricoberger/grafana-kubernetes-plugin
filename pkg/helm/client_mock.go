// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=./client_mock.go -package=helm Client
//

// Package helm is a generated GoMock package.
package helm

import (
	reflect "reflect"

	data "github.com/grafana/grafana-plugin-sdk-go/data"
	gomock "go.uber.org/mock/gomock"
	release "helm.sh/helm/v3/pkg/release"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetRelease mocks base method.
func (m *MockClient) GetRelease(name string, version int64) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", name, version)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockClientMockRecorder) GetRelease(name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockClient)(nil).GetRelease), name, version)
}

// ListReleaseHistory mocks base method.
func (m *MockClient) ListReleaseHistory(name string) (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseHistory", name)
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleaseHistory indicates an expected call of ListReleaseHistory.
func (mr *MockClientMockRecorder) ListReleaseHistory(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseHistory", reflect.TypeOf((*MockClient)(nil).ListReleaseHistory), name)
}

// ListReleases mocks base method.
func (m *MockClient) ListReleases() (*data.Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleases")
	ret0, _ := ret[0].(*data.Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockClientMockRecorder) ListReleases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockClient)(nil).ListReleases))
}

// RollbackRelease mocks base method.
func (m *MockClient) RollbackRelease(name string, version int64, options RollbackOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRelease", name, version, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackRelease indicates an expected call of RollbackRelease.
func (mr *MockClientMockRecorder) RollbackRelease(name, version, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRelease", reflect.TypeOf((*MockClient)(nil).RollbackRelease), name, version, options)
}

// UninstallRelease mocks base method.
func (m *MockClient) UninstallRelease(name string, options UninstallOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallRelease", name, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallRelease indicates an expected call of UninstallRelease.
func (mr *MockClientMockRecorder) UninstallRelease(name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallRelease", reflect.TypeOf((*MockClient)(nil).UninstallRelease), name, options)
}
